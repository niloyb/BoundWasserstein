test_beta_update_1[i] <- sum((solve(t(wX)%*%wX+diag(d))%*%t(wX)%*%w_aug_y-beta_mean)^2)^0.5
}
max(test_beta_update_1)
# Testing the aug_y update function
iterations <- 5
test_aug_y_update_1 <- rep(NA,iterations)
test_aug_y_update_2 <- rep(NA,iterations)
for(i in 1:iterations){
n <- 1
p <- 1 + round(2*exp(1))
X <- matrix(runif(n*p),n,p)
aug_y <- rnorm(n)
w <- rexp(n)
beta <- rnorm(p)
e <- 0
sample1 <- sapply(c(1:100000), function(x){TruncatedNormal::rtnorm(1, mu=cpp_mat_vec_prod(X, beta), sd=1/sqrt(w), lb=-Inf, ub=0)})
sample2 <- sapply(c(1:100000), function(x){update_aug_y(beta, w, e, X)})
mean1 <- mean(sample1)
mean2 <- mean(sample2)
var1 <- var(sample1)
var2 <- var(sample2)
test_aug_y_update_1[i] <- abs(mean1-mean2)
test_aug_y_update_2[i] <- abs(var1-var2)
}
max(test_aug_y_update_1)
max(test_aug_y_update_2)
# Testing the z update function
# z update
n <- 50
p <- 20
s <- 5
true_beta <- matrix(0,p,1)
true_beta[1:s] = 2^(-(seq(s)/4-9/4))
w <- rep(1,n)
tau0 <- 0.01
tau1 <- 1
q <- 0.05
update_z_exact(true_beta+0.01*rnorm(p), w, tau0, tau1, q)
rm(list = ls())
setwd('/Users/niloybiswas/Dropbox/Apps/Overleaf/couplings/code/skinny_gibbs/implementation/')
source(file = 'skinny_gibbs_functions.R')
n <- 100
p <- 5000
s0 <- 20
true_beta <- matrix(0,p,1)
true_beta[1:s0] = 2^(-(seq(s0)/4-9/4))
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
# Error terms
# error_std <- 0.1
# error_terms = error_std*rnorm(n, mean = 0, sd = 1)
# true_aug_y = X%*%true_beta + error_terms
true_aug_y = rlogis(n, location = X%*%true_beta) # variance pi^2/3
y <- ifelse(true_aug_y>0,1,0) # Logistic response
X <- matrix(scale(X),n,p) ### important for Bayesian variable selection
# Choice of q, tau0, tau1
K <- max(10,log(n))
q_seq <- seq(0,1,0.0001)
probs <- abs(pbinom(K,p,q_seq)-0.9)
q_index <- which(probs==min(probs))
q <- q_seq[q_index] # Following skinny gibbs paper
tau0 <- 1/sqrt(n) # Following skinny gibbs paper
tau1 <- sqrt(max(1, p^(2.1)/(100*n))) # Following skinny gibbs paper
# Fixing w
s <- pi/sqrt(3) # sd of logistic distribution
w <- rep(1,n)/(s^2)
rm(list = ls())
setwd('/Users/niloybiswas/Dropbox/Apps/Overleaf/couplings/code/skinny_gibbs/implementation/')
source(file = 'skinny_gibbs_functions.R')
n <- 100
p <- 1000
s0 <- 20
true_beta <- matrix(0,p,1)
true_beta[1:s0] = 2^(-(seq(s0)/4-9/4))
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
# Error terms
# error_std <- 0.1
# error_terms = error_std*rnorm(n, mean = 0, sd = 1)
# true_aug_y = X%*%true_beta + error_terms
true_aug_y = rlogis(n, location = X%*%true_beta) # variance pi^2/3
y <- ifelse(true_aug_y>0,1,0) # Logistic response
X <- matrix(scale(X),n,p) ### important for Bayesian variable selection
# Choice of q, tau0, tau1
K <- max(10,log(n))
q_seq <- seq(0,1,0.0001)
probs <- abs(pbinom(K,p,q_seq)-0.9)
q_index <- which(probs==min(probs))
q <- q_seq[q_index] # Following skinny gibbs paper
tau0 <- 1/sqrt(n) # Following skinny gibbs paper
tau1 <- sqrt(max(1, p^(2.1)/(100*n))) # Following skinny gibbs paper
# Fixing w
s <- pi/sqrt(3) # sd of logistic distribution
w <- rep(1,n)/(s^2)
burnin <- 5e3
chain_length <- 1e4
# Exact chain
exact_chain <- full_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(exact_chain$z[(burnin:chain_length),])>0.5) #
library(skinnybasad)
B0=rep(0,p)
ind = sample(seq(1: p), 5)
Z0=rep(0,p); Z0[ind] = 1
exact_chain2 = skinnybasad(X,E=y,pr=q,B0, Z0,nsplit=10,modif=0,nburn=burnin,niter=chain_length,printitrsep=20000,maxsize=30)
library(skinnybasad)
exact_chain2 = skinnybasad(X,E=y,pr=q,B0, Z0,nsplit=10,modif=0,nburn=burnin,niter=chain_length,printitrsep=20000,maxsize=30)
sinkky_chain2 = skinnybasad(X,E=y,pr=q,B0, Z0,nsplit=10,modif=0,nburn=burnin,niter=chain_length,printitrsep=20000,maxsize=30)
skinny_chain <- skinny_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(skinny_chain$z[(burnin:chain_length),])>0.5) #
colMeans(skinny_chain$beta[(burnin:chain_length),c(1:s0)])
#matplot(skinny_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(skinny_chain$z[(burnin:chain_length),c(1:s0)])
rm(list = ls())
setwd('/Users/niloybiswas/Dropbox/Apps/Overleaf/couplings/code/skinny_gibbs/implementation/')
source(file = 'skinny_gibbs_functions.R')
n <- 100
p <- 1000
s0 <- 10
true_beta <- matrix(0,p,1)
true_beta[1:s0] = 2^(-(seq(s0)/4-9/4))
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
# Error terms
# error_std <- 0.1
# error_terms = error_std*rnorm(n, mean = 0, sd = 1)
# true_aug_y = X%*%true_beta + error_terms
true_aug_y = rlogis(n, location = X%*%true_beta) # variance pi^2/3
y <- ifelse(true_aug_y>0,1,0) # Logistic response
X <- matrix(scale(X),n,p) ### important for Bayesian variable selection
# Choice of q, tau0, tau1
K <- max(10,log(n))
q_seq <- seq(0,1,0.0001)
probs <- abs(pbinom(K,p,q_seq)-0.9)
q_index <- which(probs==min(probs))
q <- q_seq[q_index] # Following skinny gibbs paper
tau0 <- 1/sqrt(n) # Following skinny gibbs paper
tau1 <- sqrt(max(1, p^(2.1)/(100*n))) # Following skinny gibbs paper
# Fixing w
s <- pi/sqrt(3) # sd of logistic distribution
w <- rep(1,n)/(s^2)
burnin <- 5e3
chain_length <- 1e4
# Exact chain
exact_chain <- full_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(exact_chain$z[(burnin:chain_length),])>0.5) #
colMeans(exact_chain$beta[(burnin:chain_length),c(1:s0)])
#matplot(exact_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(exact_chain$z[(burnin:chain_length),c(1:s0)])
#matplot(colMeans(exact_chain$z[(burnin:chain_length),c(1:s0)]), type = 'l')
skinny_chain <- skinny_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(skinny_chain$z[(burnin:chain_length),])>0.5) #
colMeans(skinny_chain$beta[(burnin:chain_length),c(1:s0)])
#matplot(skinny_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(skinny_chain$z[(burnin:chain_length),c(1:s0)])
# Testing skinny z update
coupled_exact_skinny_chain <-
exact_skinny_chain(X, y, tau0, tau1, q, w, chain_length=chain_length,
rinit=NULL,X_scaled=TRUE)
which(colMeans(coupled_exact_skinny_chain$exact_z[(burnin:chain_length),])>0.5)
which(colMeans(coupled_exact_skinny_chain$skinny_z[(burnin:chain_length),])>0.5)
# Coupled trajectories
matplot(rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5, type = 'l')
mean(rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)[(burnin:chain_length),]^2)^0.5)
matplot(rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)^2)^0.5, type = 'l')
mean(rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)[(burnin:chain_length),]^2)^0.5)
ymax <- max(rowSums((exact_chain$beta-skinny_chain$beta)^2)^0.5, rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5)
matplot((rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5),
type = 'l', ylab = 'beta distance', ylim=c(0,ymax))
lines((rowSums((exact_chain$beta-skinny_chain$beta)^2)^0.5),type = 'l', col='blue')
ymax <- max(rowSums((exact_chain$z-skinny_chain$z)^2)^0.5,
rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)^2)^0.5)
matplot((rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)^2)^0.5),
type = 'l', ylab = 'z distance',ylim=c(0,ymax))
lines((rowSums((exact_chain$z-skinny_chain$z)^2)^0.5),type = 'l', col='blue')
which(colMeans(skinny_chain$z[(burnin:chain_length),])>0.5) #
which(colMeans(exact_chain$z[(burnin:chain_length),])>0.5) #
colMeans(exact_chain$z[(burnin:chain_length),c(1:s0)])
exact_chain2 = skinnybasad(X,E=y,pr=q,B0, Z0,nsplit=10,modif=0,nburn=burnin,niter=chain_length,printitrsep=20000,maxsize=30)
B0=rep(0,p)
library(skinnybasad)
B0=rep(0,p)
ind = sample(seq(1: p), 5)
Z0=rep(0,p); Z0[ind] = 1
exact_chain2 = skinnybasad(X,E=y,pr=q,B0, Z0,nsplit=10,modif=0,nburn=burnin,niter=chain_length,printitrsep=20000,maxsize=30)
matplot(skinny_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
matplot(skinny_chain$beta[(burnin:chain_length),c(1:5)], type = 'l')
matplot(skinny_chain$beta[(9e3:chain_length),c(1:5)], type = 'l')
matplot(exact_chain$beta[(9e3:chain_length),c(1:5)], type = 'l')
matplot(skinny_chain$beta[(9e3:chain_length),c(1:5)], type = 'l')
matplot(exact_chain$beta[(9e3:chain_length),c(1:5)], type = 'l')
matplot(exact_chain$z[(9e3:chain_length),c(1:5)], type = 'l')
matplot(skinny_chain$z[(9e3:chain_length),c(1:5)], type = 'l')
matplot(exact_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(exact_chain$beta[(burnin:chain_length),c(1:s0)])
which(colMeans(exact_chain$z[(burnin:chain_length),])>0.5)
rm(list = ls())
setwd('/Users/niloybiswas/Dropbox/Apps/Overleaf/couplings/code/skinny_gibbs/implementation/')
source(file = 'skinny_gibbs_functions.R')
n <- 100
p <- 1000
s0 <- 10
true_beta <- matrix(0,p,1)
true_beta[1:s0] = 2^(-(seq(s0)/4-9/4))
true_beta
true_beta[1:s0]
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
# Error terms
# error_std <- 0.1
# error_terms = error_std*rnorm(n, mean = 0, sd = 1)
# true_aug_y = X%*%true_beta + error_terms
true_aug_y = rlogis(n, location = X%*%true_beta) # variance pi^2/3
y <- ifelse(true_aug_y>0,1,0) # Logistic response
X <- matrix(scale(X),n,p) ### important for Bayesian variable selection
n <- 100
p <- 5000
s0 <- 10
true_beta <- matrix(0,p,1)
true_beta[1:s0] = 2^(-(seq(s0)/4-9/4))
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
# Error terms
# error_std <- 0.1
# error_terms = error_std*rnorm(n, mean = 0, sd = 1)
# true_aug_y = X%*%true_beta + error_terms
true_aug_y = rlogis(n, location = X%*%true_beta) # variance pi^2/3
y <- ifelse(true_aug_y>0,1,0) # Logistic response
X <- matrix(scale(X),n,p) ### important for Bayesian variable selection
# Choice of q, tau0, tau1
K <- max(10,log(n))
q_seq <- seq(0,1,0.0001)
probs <- abs(pbinom(K,p,q_seq)-0.9)
q_index <- which(probs==min(probs))
q <- q_seq[q_index] # Following skinny gibbs paper
tau0 <- 1/sqrt(n) # Following skinny gibbs paper
tau1 <- sqrt(max(1, p^(2.1)/(100*n))) # Following skinny gibbs paper
# Fixing w
s <- pi/sqrt(3) # sd of logistic distribution
w <- rep(1,n)/(s^2)
burnin <- 5e3
chain_length <- 1e4
# Exact chain
exact_chain <- full_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(exact_chain$z[(burnin:chain_length),])>0.5) #
colMeans(exact_chain$beta[(burnin:chain_length),c(1:s0)])
matplot(exact_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
rm(list = ls())
setwd('/Users/niloybiswas/Dropbox/Apps/Overleaf/couplings/code/skinny_gibbs/implementation/')
source(file = 'skinny_gibbs_functions.R')
n <- 250
p <- 500
s0 <- 10
true_beta <- matrix(0,p,1)
true_beta[1:s0] = 2^(-(seq(s0)/4-9/4))
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
# Error terms
# error_std <- 0.1
# error_terms = error_std*rnorm(n, mean = 0, sd = 1)
# true_aug_y = X%*%true_beta + error_terms
true_aug_y = rlogis(n, location = X%*%true_beta) # variance pi^2/3
y <- ifelse(true_aug_y>0,1,0) # Logistic response
X <- matrix(scale(X),n,p) ### important for Bayesian variable selection
# Choice of q, tau0, tau1
K <- max(10,log(n))
q_seq <- seq(0,1,0.0001)
probs <- abs(pbinom(K,p,q_seq)-0.9)
q_index <- which(probs==min(probs))
q <- q_seq[q_index] # Following skinny gibbs paper
tau0 <- 1/sqrt(n) # Following skinny gibbs paper
tau1 <- sqrt(max(1, p^(2.1)/(100*n))) # Following skinny gibbs paper
# Fixing w
s <- pi/sqrt(3) # sd of logistic distribution
w <- rep(1,n)/(s^2)
burnin <- 5e3
chain_length <- 1e4
# Exact chain
exact_chain <- full_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(exact_chain$z[(burnin:chain_length),])>0.5) #
colMeans(exact_chain$beta[(burnin:chain_length),c(1:s0)])
#matplot(exact_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(exact_chain$z[(burnin:chain_length),c(1:s0)])
rm(list = ls())
setwd('/Users/niloybiswas/Dropbox/Apps/Overleaf/couplings/code/skinny_gibbs/implementation/')
source(file = 'skinny_gibbs_functions.R')
n <- 250
p <- 500
s0 <- 10
true_beta <- matrix(0,p,1)
true_beta[1:s0] = 2^(-(seq(s0)/4-9/4))
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
# Error terms
# error_std <- 0.1
# error_terms = error_std*rnorm(n, mean = 0, sd = 1)
# true_aug_y = X%*%true_beta + error_terms
true_aug_y = rlogis(n, location = X%*%true_beta) # variance pi^2/3
y <- ifelse(true_aug_y>0,1,0) # Logistic response
X <- matrix(scale(X),n,p) ### important for Bayesian variable selection
# Choice of q, tau0, tau1
K <- max(10,log(n))
q_seq <- seq(0,1,0.0001)
probs <- abs(pbinom(K,p,q_seq)-0.9)
q_index <- which(probs==min(probs))
q <- q_seq[q_index] # Following skinny gibbs paper
tau0 <- 1/sqrt(n) # Following skinny gibbs paper
tau1 <- sqrt(max(1, p^(2.1)/(100*n))) # Following skinny gibbs paper
# Fixing w
s <- pi/sqrt(3) # sd of logistic distribution
w <- rep(1,n)/(s^2)
burnin <- 5e3
chain_length <- 1e4
# Exact chain
exact_chain <- full_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(exact_chain$z[(burnin:chain_length),])>0.5) #
colMeans(exact_chain$beta[(burnin:chain_length),c(1:s0)])
#matplot(exact_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(exact_chain$z[(burnin:chain_length),c(1:s0)])
matplot(exact_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
matplot(colMeans(exact_chain$z[(burnin:chain_length),c(1:s0)]), type = 'l')
library(skinnybasad)
B0=rep(0,p)
ind = sample(seq(1: p), 5)
Z0=rep(0,p); Z0[ind] = 1
exact_chain2 = skinnybasad(X,E=y,pr=q,B0, Z0,nsplit=10,modif=0,nburn=burnin,niter=chain_length,printitrsep=20000,maxsize=30)
skinny_chain <- skinny_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(skinny_chain$z[(burnin:chain_length),])>0.5) #
colMeans(skinny_chain$beta[(burnin:chain_length),c(1:s0)])
matplot(skinny_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(skinny_chain$z[(burnin:chain_length),c(1:s0)])
# Testing skinny z update
coupled_exact_skinny_chain <-
exact_skinny_chain(X, y, tau0, tau1, q, w, chain_length=chain_length,
rinit=NULL,X_scaled=TRUE)
which(colMeans(coupled_exact_skinny_chain$exact_z[(burnin:chain_length),])>0.5)
which(colMeans(coupled_exact_skinny_chain$skinny_z[(burnin:chain_length),])>0.5)
# Coupled trajectories
matplot(rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5, type = 'l')
mean(rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)[(burnin:chain_length),]^2)^0.5)
matplot(rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)^2)^0.5, type = 'l')
mean(rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)[(burnin:chain_length),]^2)^0.5)
matplot(rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5, type = 'l')
mean(rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)[(burnin:chain_length),]^2)^0.5)
ymax <- max(rowSums((exact_chain$beta-skinny_chain$beta)^2)^0.5, rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5)
matplot((rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5),
type = 'l', ylab = 'beta distance', ylim=c(0,ymax))
lines((rowSums((exact_chain$beta-skinny_chain$beta)^2)^0.5),type = 'l', col='blue')
ymax <- max(rowSums((exact_chain$z-skinny_chain$z)^2)^0.5,
rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)^2)^0.5)
matplot((rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)^2)^0.5),
type = 'l', ylab = 'z distance',ylim=c(0,ymax))
lines((rowSums((exact_chain$z-skinny_chain$z)^2)^0.5),type = 'l', col='blue')
rm(list = ls())
setwd('/Users/niloybiswas/Dropbox/Apps/Overleaf/couplings/code/skinny_gibbs/implementation/')
source(file = 'skinny_gibbs_functions.R')
rm(list = ls())
setwd('/Users/niloybiswas/Dropbox/Apps/Overleaf/couplings/code/skinny_gibbs/implementation/')
source(file = 'skinny_gibbs_functions.R')
n <- 250
p <- 500
s0 <- 10
true_beta <- matrix(0,p,1)
true_beta[1:s0] = 2^(-(seq(s0)/4-9/4))
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
# Error terms
# error_std <- 0.1
# error_terms = error_std*rnorm(n, mean = 0, sd = 1)
# true_aug_y = X%*%true_beta + error_terms
true_aug_y = rlogis(n, location = X%*%true_beta) # variance pi^2/3
y <- ifelse(true_aug_y>0,1,0) # Logistic response
X <- matrix(scale(X),n,p) ### important for Bayesian variable selection
# Choice of q, tau0, tau1
K <- max(10,log(n))
q_seq <- seq(0,1,0.0001)
probs <- abs(pbinom(K,p,q_seq)-0.9)
q_index <- which(probs==min(probs))
q <- q_seq[q_index] # Following skinny gibbs paper
tau0 <- 1/sqrt(n) # Following skinny gibbs paper
tau1 <- sqrt(max(1, p^(2.1)/(100*n))) # Following skinny gibbs paper
# Fixing w
s <- pi/sqrt(3) # sd of logistic distribution
w <- rep(1,n)/(s^2)
burnin <- 5e3
chain_length <- 1e4
burnin <- 5e3
chain_length <- 1e4
# Exact chain
exact_chain <- full_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(exact_chain$z[(burnin:chain_length),])>0.5) #
colMeans(exact_chain$beta[(burnin:chain_length),c(1:s0)])
#matplot(exact_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(exact_chain$z[(burnin:chain_length),c(1:s0)])
#matplot(colMeans(exact_chain$z[(burnin:chain_length),c(1:s0)]), type = 'l')
# # Implementation from Skinny Gibbs package
# library(skinnybasad)
# B0=rep(0,p)
# ind = sample(seq(1: p), 5)
# Z0=rep(0,p); Z0[ind] = 1
# exact_chain2 = skinnybasad(X,E=y,pr=q,B0, Z0,nsplit=10,modif=0,nburn=burnin,niter=chain_length,printitrsep=20000,maxsize=30)
# which(exact_chain2$marZ>0.5) # Should be similar to own implementation
# sinkky_chain2 = skinnybasad(X,E=y,pr=q,B0, Z0,nsplit=10,modif=0,nburn=burnin,niter=chain_length,printitrsep=20000,maxsize=30)
# which(sinkky_chain2$marZ>0.5) # Should be similar to own implementation
skinny_chain <- skinny_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(skinny_chain$z[(burnin:chain_length),])>0.5) #
colMeans(skinny_chain$beta[(burnin:chain_length),c(1:s0)])
#matplot(skinny_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(skinny_chain$z[(burnin:chain_length),c(1:s0)])
#matplot(colMeans(skinny_chain$z[(burnin:chain_length),c(1:s0)]), type = 'l')
source(file = 'skinny_gibbs_functions.R')
skinny_chain <- skinny_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
skinny_chain <- skinny_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
skinny_gibbs
skinny_gibbs_kernel
rm(list = ls())
setwd('/Users/niloybiswas/Dropbox/Apps/Overleaf/couplings/code/skinny_gibbs/implementation/')
source(file = 'skinny_gibbs_functions.R')
n <- 250
p <- 500
s0 <- 10
true_beta <- matrix(0,p,1)
true_beta[1:s0] = 2^(-(seq(s0)/4-9/4))
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
# Error terms
# error_std <- 0.1
# error_terms = error_std*rnorm(n, mean = 0, sd = 1)
# true_aug_y = X%*%true_beta + error_terms
true_aug_y = rlogis(n, location = X%*%true_beta) # variance pi^2/3
y <- ifelse(true_aug_y>0,1,0) # Logistic response
X <- matrix(scale(X),n,p) ### important for Bayesian variable selection
# Choice of q, tau0, tau1
K <- max(10,log(n))
q_seq <- seq(0,1,0.0001)
probs <- abs(pbinom(K,p,q_seq)-0.9)
q_index <- which(probs==min(probs))
q <- q_seq[q_index] # Following skinny gibbs paper
tau0 <- 1/sqrt(n) # Following skinny gibbs paper
tau1 <- sqrt(max(1, p^(2.1)/(100*n))) # Following skinny gibbs paper
# Fixing w
s <- pi/sqrt(3) # sd of logistic distribution
w <- rep(1,n)/(s^2)
burnin <- 1e3
chain_length <- 2e3
# Exact chain
exact_chain <- full_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(exact_chain$z[(burnin:chain_length),])>0.5) #
colMeans(exact_chain$beta[(burnin:chain_length),c(1:s0)])
#matplot(exact_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(exact_chain$z[(burnin:chain_length),c(1:s0)])
skinny_chain <- skinny_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
# Skinny chain kernel with w fixed
skinny_gibbs_kernel <- function(beta, aug_y, z, w, X, y, tau0, tau1, q,
X_scaled, skinny_correction=TRUE){
beta_new <- update_beta_skinny(w, z, aug_y, X, tau0, tau1, X_scaled=X_scaled)
aug_y_new <- update_aug_y(beta_new, w, y, X)
if(skinny_correction){ # Correction
z_new <- update_z_skinny(beta_new, w, z, aug_y, X, tau0, tau1, q, X_scaled=X_scaled)
} else { # No correction
z_new <- update_z_exact(beta_new, w, tau0, tau1, q)
}
#
w_new <- w
return(list('beta'=beta_new, 'aug_y'=aug_y_new, 'z'=z_new, 'w'=w_new))
}
skinny_chain <- skinny_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(skinny_chain$z[(burnin:chain_length),])>0.5) #
colMeans(skinny_chain$beta[(burnin:chain_length),c(1:s0)])
#matplot(skinny_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(skinny_chain$z[(burnin:chain_length),c(1:s0)])
# Testing skinny z update
coupled_exact_skinny_chain <-
exact_skinny_chain(X, y, tau0, tau1, q, w, chain_length=chain_length,
rinit=NULL,X_scaled=TRUE)
which(colMeans(coupled_exact_skinny_chain$exact_z[(burnin:chain_length),])>0.5)
which(colMeans(coupled_exact_skinny_chain$skinny_z[(burnin:chain_length),])>0.5)
exact_skinny_chain
exact_skinny_coupled_kernel
# Coupled trajectories
matplot(rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5, type = 'l')
mean(rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)[(burnin:chain_length),]^2)^0.5)
matplot(rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)^2)^0.5, type = 'l')
mean(rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)[(burnin:chain_length),]^2)^0.5)
ymax <- max(rowSums((exact_chain$beta-skinny_chain$beta)^2)^0.5, rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5)
matplot((rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5),
type = 'l', ylab = 'beta distance', ylim=c(0,ymax))
lines((rowSums((exact_chain$beta-skinny_chain$beta)^2)^0.5),type = 'l', col='blue')
ymax <- max(rowSums((exact_chain$z-skinny_chain$z)^2)^0.5,
rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)^2)^0.5)
matplot((rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)^2)^0.5),
type = 'l', ylab = 'z distance',ylim=c(0,ymax))
lines((rowSums((exact_chain$z-skinny_chain$z)^2)^0.5),type = 'l', col='blue')
# Testing skinny z update: without skinny_correction
coupled_exact_skinny_chain_nocorrection <-
exact_skinny_chain(X, y, tau0, tau1, q, w, chain_length=chain_length, skinny_correction = FALSE)
which(colMeans(coupled_exact_skinny_chain$exact_z[(burnin:chain_length),])>0.5)
which(colMeans(coupled_exact_skinny_chain$skinny_z[(burnin:chain_length),])>0.5)
ymax <- max(rowSums((exact_chain$beta-skinny_chain$beta)^2)^0.5, rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5)
matplot((rowSums((coupled_exact_skinny_chain$exact_beta-coupled_exact_skinny_chain$skinny_beta)^2)^0.5),
type = 'l', ylab = 'beta distance', ylim=c(0,ymax))
lines((rowSums((exact_chain$beta-skinny_chain$beta)^2)^0.5),type = 'l', col='blue')
ymax <- max(rowSums((exact_chain$z-skinny_chain$z)^2)^0.5,
rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)^2)^0.5)
matplot((rowSums((coupled_exact_skinny_chain$exact_z-coupled_exact_skinny_chain$skinny_z)^2)^0.5),
type = 'l', ylab = 'z distance',ylim=c(0,ymax))
lines((rowSums((exact_chain$z-skinny_chain$z)^2)^0.5),type = 'l', col='blue')
colMeans(skinny_chain$beta[(burnin:chain_length),c(1:s0)])
which(colMeans(skinny_chain$z[(burnin:chain_length),])>0.5) #
burnin <- 1e3
chain_length <- 2e3
# Exact chain
exact_chain <- full_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(exact_chain$z[(burnin:chain_length),])>0.5) #
colMeans(exact_chain$beta[(burnin:chain_length),c(1:s0)])
#matplot(exact_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(exact_chain$z[(burnin:chain_length),c(1:s0)])
skinny_chain <- skinny_gibbs(X, y, tau0, tau1, q, w, chain_length=chain_length)
which(colMeans(skinny_chain$z[(burnin:chain_length),])>0.5) #
colMeans(skinny_chain$beta[(burnin:chain_length),c(1:s0)])
#matplot(skinny_chain$beta[(burnin:chain_length),c(1:s0)], type = 'l')
colMeans(skinny_chain$z[(burnin:chain_length),c(1:s0)])
